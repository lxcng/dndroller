// Code generated by entc, DO NOT EDIT.

package repo

import (
	"dndroller/internal/model"
	"dndroller/internal/repo/set"
	"dndroller/internal/repo/user"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Set is the model entity for the Set schema.
type Set struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data *model.DiceSet `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SetQuery when eager-loading is set.
	Edges    SetEdges `json:"edges"`
	user_set *int
}

// SetEdges holds the relations/edges for other nodes in the graph.
type SetEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SetEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Set) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case set.FieldData:
			values[i] = new([]byte)
		case set.FieldID:
			values[i] = new(sql.NullInt64)
		case set.ForeignKeys[0]: // user_set
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Set", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Set fields.
func (s *Set) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case set.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case set.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case set.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_set", value)
			} else if value.Valid {
				s.user_set = new(int)
				*s.user_set = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Set entity.
func (s *Set) QueryOwner() *UserQuery {
	return (&SetClient{config: s.config}).QueryOwner(s)
}

// Update returns a builder for updating this Set.
// Note that you need to call Set.Unwrap() before calling this method if this Set
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Set) Update() *SetUpdateOne {
	return (&SetClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Set entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Set) Unwrap() *Set {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("repo: Set is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Set) String() string {
	var builder strings.Builder
	builder.WriteString("Set(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", data=")
	builder.WriteString(fmt.Sprintf("%v", s.Data))
	builder.WriteByte(')')
	return builder.String()
}

// Sets is a parsable slice of Set.
type Sets []*Set

func (s Sets) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
